import SwiftUI

// Generated by Supernova - do not modify manually
public extension Color {
    
    static let Token = Color.TokenColor()
    
    struct TokenColor {
        public let surface = Color(.sRGB, red: 248/255, green: 250/255, blue: 252/255, opacity: 1) 
        public let subtle = Color(.sRGB, red: 203/255, green: 213/255, blue: 225/255, opacity: 1) 
        public let muted = Color(.sRGB, red: 203/255, green: 213/255, blue: 225/255, opacity: 1) 
        public let canvas = Color(.sRGB, red: 241/255, green: 245/255, blue: 249/255, opacity: 1) 

        // accent
        public let accentDefault = Color(.sRGB, red: 236/255, green: 72/255, blue: 153/255, opacity: 1) 
        public let accentMuted = Color(.sRGB, red: 249/255, green: 168/255, blue: 212/255, opacity: 1) 
        public let accentSubtle = Color(.sRGB, red: 249/255, green: 168/255, blue: 212/255, opacity: 1) 
        public let accentEmphasis = Color(.sRGB, red: 157/255, green: 23/255, blue: 77/255, opacity: 1) 
        public let accentDisabled = Color(.sRGB, red: 203/255, green: 213/255, blue: 225/255, opacity: 1) 

        // input
        public let inputBackground = Color(.sRGB, red: 255/255, green: 255/255, blue: 255/255, opacity: 1) 
        public let inputText = Color(.sRGB, red: 30/255, green: 41/255, blue: 59/255, opacity: 1) 
        public let inputPlaceholder = Color(.sRGB, red: 100/255, green: 116/255, blue: 139/255, opacity: 1) 
        public let inputTextDisabled = Color(.sRGB, red: 148/255, green: 163/255, blue: 184/255, opacity: 1) 

        // border
        public let inputborderDefault = Color(.sRGB, red: 203/255, green: 213/255, blue: 225/255, opacity: 1) 
        public let inputborderDisabled = Color(.sRGB, red: 226/255, green: 232/255, blue: 240/255, opacity: 1) 

        // fg
        public let inputfgDisabled = Color(.sRGB, red: 203/255, green: 213/255, blue: 225/255, opacity: 1) 

        // info
        public let infoDefault = Color(.sRGB, red: 49/255, green: 66/255, blue: 196/255, opacity: 1) 
        public let infoSubtle = Color(.sRGB, red: 139/255, green: 152/255, blue: 249/255, opacity: 1) 
        public let infoMuted = Color(.sRGB, red: 139/255, green: 152/255, blue: 249/255, opacity: 1) 
        public let infoEmphasis = Color(.sRGB, red: 61/255, green: 83/255, blue: 245/255, opacity: 1) 
        public let infoOnInfo = Color(.sRGB, red: 255/255, green: 255/255, blue: 255/255, opacity: 1) 

        // error
        public let errorDefault = Color(.sRGB, red: 156/255, green: 15/255, blue: 46/255, opacity: 1) 
        public let errorSubtle = Color(.sRGB, red: 233/255, green: 92/255, blue: 123/255, opacity: 1) 
        public let errorMuted = Color(.sRGB, red: 233/255, green: 92/255, blue: 123/255, opacity: 1) 
        public let errorEmphasis = Color(.sRGB, red: 223/255, green: 22/255, blue: 66/255, opacity: 1) 
        public let errorOnError = Color(.sRGB, red: 255/255, green: 255/255, blue: 255/255, opacity: 1) 

        // warning
        public let warningDefault = Color(.sRGB, red: 179/255, green: 131/255, blue: 39/255, opacity: 1) 
        public let warningSubtle = Color(.sRGB, red: 255/255, green: 228/255, blue: 175/255, opacity: 1) 
        public let warningMuted = Color(.sRGB, red: 255/255, green: 228/255, blue: 175/255, opacity: 1) 
        public let warningEmphasis = Color(.sRGB, red: 255/255, green: 187/255, blue: 56/255, opacity: 1) 
        public let warningOnWarning = Color(.sRGB, red: 0/255, green: 0/255, blue: 0/255, opacity: 1) 

        // success
        public let successDefault = Color(.sRGB, red: 17/255, green: 118/255, blue: 61/255, opacity: 1) 
        public let successMuted = Color(.sRGB, red: 93/255, green: 195/255, blue: 137/255, opacity: 1) 
        public let successSubtle = Color(.sRGB, red: 93/255, green: 195/255, blue: 137/255, opacity: 1) 
        public let successEmphasis = Color(.sRGB, red: 24/255, green: 169/255, blue: 87/255, opacity: 1) 
        public let successOnSuccess = Color(.sRGB, red: 255/255, green: 255/255, blue: 255/255, opacity: 1) 

        // border
        public let borderDefault = Color(.sRGB, red: 241/255, green: 245/255, blue: 249/255, opacity: 1) 

        // shadow
        public let shadowColor = Color(.sRGB, red: 48/255, green: 49/255, blue: 51/255, opacity: 1) 
    }
}